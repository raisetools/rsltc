(Maprange)
(Map
 (mapdef 0
  (mapdef-1 nil 3255418037 3352698723
   ("" (skosimp*) (("" (grind) nil nil)) nil) proved nil 94 20 t nil))
 (dom_add_in_map 0
  (dom_add_in_map-1 nil 3297489005 3352698723
   ("" (skosimp*)
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   proved
   ((member const-decl "bool" sets nil)
    (map_rng formal-type-decl nil Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (map type-eq-decl nil Map nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (add_in_map const-decl "map" Map nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_dom formal-type-decl nil Map nil))
   278 210 t shostak))
 (dom_override 0
  (dom_override-1 nil 3297488213 3352698723
   ("" (skosimp*)
    (("" (expand "override")
      (("" (expand "union")
        (("" (expand "dom")
          (("" (decompose-equality 1) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((override const-decl "Maprange" Map nil)
    (dom const-decl "set[map_dom]" Map nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_dom formal-type-decl nil Map nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nil adt-constructor-decl "(nil?)" Maprange_adt nil)
    (nil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt nil)
    (member const-decl "bool" Map nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (map type-eq-decl nil Map nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonnil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt
     nil)
    (Maprange type-decl nil Maprange_adt nil)
    (map_rng formal-type-decl nil Map nil)
    (union const-decl "set" sets nil))
   187 110 t shostak))
 (dom_restriction_by 0
  (dom_restriction_by-1 nil 3297488616 3352698723
   ("" (skosimp*)
    (("" (expand "restriction_by")
      (("" (expand "difference")
        (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((restriction_by const-decl "Maprange" Map nil)
    (map_rng formal-type-decl nil Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (map type-eq-decl nil Map nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" Map nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (nil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt nil)
    (nil adt-constructor-decl "(nil?)" Maprange_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_dom formal-type-decl nil Map nil)
    (difference const-decl "set" sets nil))
   136 70 t shostak))
 (dom_restriction_to 0
  (dom_restriction_to-1 nil 3297488660 3352698724
   ("" (skosimp*)
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   proved
   ((member const-decl "bool" Map nil)
    (member const-decl "bool" sets nil)
    (map_rng formal-type-decl nil Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (map type-eq-decl nil Map nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (restriction_to const-decl "Maprange" Map nil)
    (intersection const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_dom formal-type-decl nil Map nil))
   191 90 t shostak))
 (rng_as_image_TCC1 0
  (rng_as_image_TCC1-1 nil 3297550792 3299370279
   ("" (skosimp*) (("" (typepred "d!1") (("" (propax) nil nil)) nil))
    nil)
   proved-complete
   ((nonnil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt
     nil)
    (Maprange type-decl nil Maprange_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   93 30 t shostak))
 (rng_as_image 0
  (rng_as_image-1 nil 3297490184 3352698724
   ("" (skosimp*)
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   proved
   ((map_dom formal-type-decl nil Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (map type-eq-decl nil Map nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (rng const-decl "set[map_rng]" Map nil)
    (nonnil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt
     nil)
    (image const-decl "set[R]" function_image nil)
    (rng_part adt-accessor-decl "[(nonnil?) -> rng]" Maprange_adt nil)
    (restrict const-decl "R" restrict nil)
    (dom const-decl "set[map_dom]" Map nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_rng formal-type-decl nil Map nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   275 200 t shostak)))
(Choose_Map
 (choose_map_member 0
  (choose_map_member-1 nil 3352696735 3352698726
   ("" (skosimp*)
    (("" (assert)
      (("" (iff)
        (("" (split)
          (("1" (flatten) (("1" (inst?) nil nil)) nil)
           ("2" (flatten)
            (("2" (skosimp*)
              (("2" (expand "dom")
                (("2" (use "epsilon_ax[map_dom]")
                  (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" Map nil)
    (map_dom formal-nonempty-type-decl nil Choose_Map nil)
    (map_rng formal-type-decl nil Choose_Map nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (set type-eq-decl nil sets nil) (map type-eq-decl nil Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (nonnil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt
     nil))
   2327 60 t shostak)))
(Map_Comp
 (oh_TCC1 0
  (oh_TCC1-1 nil 3255418037 3299370280 ("" (subtype-tcc) nil nil)
   proved-complete ((member const-decl "bool" Map nil)) 130 70 t nil)))
(Finite_Map
 (finite_map_TCC1 0
  (finite_map_TCC1-1 nil 3297550792 3299370280
   ("" (expand "is_finite_map")
    (("" (expand "empty_map")
      (("" (expand "dom")
        (("" (lemma "finite_emptyset[D]")
          (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((empty_map const-decl "map" Map nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (is_finite_map const-decl "bool" Finite_Map nil))
   87 90 t shostak))
 (finite_set_union 0
  (finite_set_union-1 nil 3297771365 3352698726
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 24 20 t
   shostak))
 (finite_empty_map 0
  (finite_empty_map-1 nil 3297487039 3299370280
   ("" (assert)
    (("" (auto-rewrite "empty_map[D, R]")
      (("" (expand "is_finite_map")
        (("" (expand "empty_map")
          (("" (expand "dom")
            (("" (use "finite_emptyset[D]")
              (("" (expand "emptyset") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((empty_map const-decl "map" Map nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (is_finite_map const-decl "bool" Finite_Map nil))
   71 70 t shostak))
 (finite_add_in_map 0
  (finite_add_in_map-1 nil 3297487814 3299370281
   ("" (skosimp*)
    (("" (expand "is_finite_map")
      (("" (use "dom_add_in_map")
        (("" (replace -1 * lr)
          (("" (use "finite_union[D]")
            (("" (typepred "m1!1")
              (("" (expand "is_finite_map") (("" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((is_finite_map const-decl "bool" Finite_Map nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (Maprange type-decl nil Maprange_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dom_add_in_map formula-decl nil Map nil))
   209 140 t shostak))
 (finite_override 0
  (finite_override-1 nil 3297770964 3299370281
   ("" (skosimp*)
    (("" (typepred "m1!1")
      (("" (typepred "m2!1")
        (("" (expand "is_finite_map")
          (("" (use "dom_override[D, R]")
            (("" (replace -1 * lr)
              (("" (assert)
                (("" (name "s2" "dom(m2!1)")
                  (("" (replace -1 * lr)
                    (("" (name "s1" "dom(m1!1)")
                      (("" (replace -1 * lr)
                        (("" (assert)
                          (("" (use "finite_set_union") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((is_finite_map const-decl "bool" Finite_Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dom const-decl "set[map_dom]" Map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (finite_set_union formula-decl nil Finite_Map nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom_override formula-decl nil Map nil))
   308 190 t shostak))
 (finite_restriction_by 0
  (finite_restriction_by-1 nil 3297550792 3299370281
   ("" (skosimp*)
    (("" (typepred "m1!1")
      (("" (expand "is_finite_map")
        (("" (use "dom_restriction_by")
          (("" (replace -1 * lr)
            (("" (use "finite_difference[D]") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((is_finite_map const-decl "bool" Finite_Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dom_restriction_by formula-decl nil Map nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (finite_difference judgement-tcc nil finite_sets nil))
   148 100 t shostak))
 (finite_restriction_to 0
  (finite_restriction_to-1 nil 3297550792 3299370281
   ("" (skosimp*)
    (("" (typepred "m1!1")
      (("" (expand "is_finite_map")
        (("" (use "dom_restriction_to")
          (("" (replace -1 * lr)
            (("" (use "finite_intersection2[D]") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((is_finite_map const-decl "bool" Finite_Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dom_restriction_to formula-decl nil Map nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (dom const-decl "set[map_dom]" Map nil)
    (finite_intersection2 judgement-tcc nil finite_sets nil))
   137 100 t shostak))
 (finite_rng 0
  (finite_rng-1 nil 3297489229 3299370282
   ("" (skosimp*)
    (("" (use "rng_as_image")
      (("" (replace -1 * lr)
        (("" (expand "restrict")
          (("" (use "finite_image[{d: D | nonnil?(m1!1(d))}, R]")
            (("" (typepred "m1!1")
              (("" (expand "is_finite_map")
                (("" (lemma "finite_subset[D]")
                  ((""
                    (inst -1 "dom(m1!1)"
                     "LAMBDA (s: {d: D | nonnil?[R](m1!1(d))}): TRUE")
                    (("" (assert)
                      (("" (split -1)
                        (("1"
                          (use "finite_extension[D, {d: D | nonnil?[R](m1!1(d))}]")
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "subset?")
                          (("2" (skosimp*)
                            (("2" (ground) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((rng_as_image formula-decl nil Map nil)
    (is_finite_map const-decl "bool" Finite_Map nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Maprange type-decl nil Maprange_adt nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_extension formula-decl nil extend_set_props nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (rng_part adt-accessor-decl "[(nonnil?) -> rng]" Maprange_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (nonnil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt
     nil)
    (finite_image judgement-tcc nil function_image_aux nil)
    (dom const-decl "set[map_dom]" Map nil))
   532 430 t shostak))
 (finite_override1 0
  (finite_override1-1 nil 3297491540 3352698726
   ("" (skosimp*) (("" (grind) nil nil)) nil) proved nil 39 30 t
   shostak))
 (finite_with 0
  (finite_with-1 nil 3297771982 3352698727
   ("" (skolem-typepred)
    (("" (expand "is_finite_map")
      ((""
        (case "dom(m1!1 WITH [d!1 := mk_rng(r!1)]) = union(dom(m1!1),singleton(d!1))")
        (("1" (replace -1 * lr)
          (("1" (use "finite_set_union") nil nil)) nil)
         ("2" (hide 2)
          (("2" (decompose-equality 1)
            (("2" (expand "member")
              (("2" (case "d!1=x!1")
                (("1" (assert)
                  (("1" (expand "singleton") (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "singleton") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member const-decl "bool" sets nil)
    (finite_set_union formula-decl nil Finite_Map nil)
    (m1!1 skolem-const-decl "finite_map" Finite_Map nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom const-decl "set[map_dom]" Map nil)
    (nonnil? adt-recognizer-decl "[Maprange -> boolean]" Maprange_adt
     nil)
    (mk_rng adt-constructor-decl "[rng -> (nonnil?)]" Maprange_adt nil)
    (union const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_map type-eq-decl nil Finite_Map nil)
    (is_finite_map const-decl "bool" Finite_Map nil)
    (map type-eq-decl nil Map nil)
    (Maprange type-decl nil Maprange_adt nil)
    (R formal-type-decl nil Finite_Map nil)
    (D formal-type-decl nil Finite_Map nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   119 70 t shostak)))
(finite_map_subtype
 (finite_map_subtype 0
  (finite_map_subtype-1 nil 3297921524 3352698727
   ("" (skosimp*)
    (("" (typepred "m!1")
      (("" (expand "is_finite_map")
        (("" (expand "dom") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((finite_map type-eq-decl nil Finite_Map nil)
    (is_finite_map const-decl "bool" Finite_Map nil)
    (map type-eq-decl nil Map nil)
    (S formal-subtype-decl nil finite_map_subtype nil)
    (S_pred const-decl "[R -> boolean]" finite_map_subtype nil)
    (every adt-def-decl "boolean" Maprange_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Maprange type-decl nil Maprange_adt nil)
    (R formal-type-decl nil finite_map_subtype nil)
    (D formal-type-decl nil finite_map_subtype nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dom const-decl "set[map_dom]" Map nil))
   33 10 t shostak)))
(Ranged_List
 (ranged_list1_TCC1 0
  (ranged_list1_TCC1-1 nil 3255418020 nil ("" (subtype-tcc) nil nil)
   proved-complete nil nil nil nil nil))
 (ranged_list1_TCC2 0
  (ranged_list1_TCC2-1 nil 3255418020 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil))
   nil nil nil nil))
 (ranged_list1_TCC3 0
  (ranged_list1_TCC3-1 nil 3255418020 nil
   ("" (termination-tcc) nil nil) proved-complete nil nil nil nil nil))
 (ranged_list_TCC1 0
  (ranged_list_TCC1-1 nil 3255418020 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil nil nil nil)))
(List_Ops
 (inds_TCC1 0
  (inds_TCC1-1 nil 3255418021 nil
   ("" (subtype-tcc)
    ((""
      (inst 1 "length[T](l!1) + 1"
       "LAMBDA (i:{i : nat| i > 0 AND i <= length[T](l!1)}) : i")
      (("1" (skosimp*) nil nil)
       ("2" (skosimp*) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (is_finite const-decl "bool" finite_sets nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil) (<= const-decl "bool" reals nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil))
   nil nil nil nil))
 (memberdef 0
  (memberdef-1 nil 3255418021 3352695365
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "member")
        (("2" (split)
          (("1" (expand "nth")
            (("1" (inst 1 "0")
              (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (expand "nth")
            (("2" (inst -2 "t!1")
              (("2" (split)
                (("1" (skosimp*)
                  (("1" (inst 1 "i!1+1")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (expand "member") (("2" (grind) nil nil)) nil)
                 ("3" (ground)
                  (("3" (expand "member") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    nil (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil List_Ops nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   324 250 t nil))
 (elems_append 0
  (elems_append-1 nil 3261868621 3352695365
   ("" (auto-rewrite-defs t)
    (("" (induct "l1" 1)
      (("1" (assert)
        (("1" (expand "append")
          (("1" (skosimp*)
            (("1" (expand "list2set" 1 2)
              (("1" (expand "emptyset")
                (("1" (expand "union")
                  (("1" (decompose-equality 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (decompose-equality 1)
          (("2" (expand "append" +)
            (("2" (assert)
              (("2" (expand "list2set" 1 1)
                (("2" (expand "list2set" 1 2)
                  (("2" (expand "add")
                    (("2" (inst -1 "l2!1")
                      (("2" (replace -1 * lr)
                        (("2" (expand "union")
                          (("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list2set def-decl "set[T]" list2set nil)
    (append def-decl "list[T]" list_props nil)
    (union const-decl "set" sets nil)
    (T formal-type-decl nil List_Ops nil)
    (list_induction formula-decl nil list_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (add const-decl "(nonempty?)" sets nil))
   120 80 t shostak))
 (length_null 0
  (length_null-1 nil 3272262881 3352695366 ("" (grind) nil nil)
   proved-complete ((length def-decl "nat" list_props nil)) 79 60 t
   shostak))
 (length_not_null 0
  (length_not_null-1 nil 3272262894 3352695366 ("" (grind) nil nil)
   proved-complete ((length def-decl "nat" list_props nil)) 65 70 t
   shostak))
 (length_empty 0
  (length_empty-1 nil 3272262904 3352695366 ("" (grind) nil nil)
   proved-complete ((length def-decl "nat" list_props nil)) 19 10 t
   shostak))
 (length_cons 0
  (length_cons-1 nil 3272262911 3352695366 ("" (grind) nil nil)
   proved-complete ((length def-decl "nat" list_props nil)) 9 10 t
   shostak))
 (nth_cons_TCC1 0
  (nth_cons_TCC1-1 nil 3272263118 3273997915
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved-complete
   ((below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   213 190 t shostak))
 (nth_cons_TCC2 0
  (nth_cons_TCC2-1 nil 3272263118 3273997915
   ("" (subtype-tcc)
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)
   proved-complete
   ((< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   102 100 nil shostak))
 (nth_cons 0
  (nth_cons-1 nil 3272262920 3352695366 ("" (grind) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil))
   39 40 t shostak))
 (length_append 0
  (length_append-1 nil 3273997749 3352695366
   ("" (induct "l1" 1)
    (("1" (skosimp*)
      (("1" (expand "append") (("1" (ground) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "append" +)
        (("2" (expand "length" 1 1)
          (("2" (expand "length" 1 2) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((length_empty formula-decl nil List_Ops nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil List_Ops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   52 30 t shostak))
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3273997915 3273997982
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved-complete
   ((length_append formula-decl nil List_Ops nil)) 6987 350 t shostak))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3273997915 3273998001
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved-complete nil 6838
   380 t shostak))
 (nth_append 0
  (nth_append-1 nil 3273997016 3352695366
   ("" (induct "l1" 1)
    (("1" (skosimp*)
      (("1" (expand "append")
        (("1" (lift-if)
          (("1" (expand "length" 1 1)
            (("1" (expand "length" -1 1)
              (("1" (expand "length" 1 1) (("1" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "append" 1)
        (("2" (expand "nth" 1 1)
          (("2" (expand "nth" 1 2)
            (("2" (expand "length" +)
              (("2" (expand "length" -2 1)
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (assert)
                      (("2" (flatten)
                        (("2" (inst -1 "l2!1" "i!1-1")
                          (("1" (assert)
                            (("1" (replace -1 * lr)
                              (("1"
                                (lift-if 2)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (skosimp*) nil nil))
    nil)
   proved-complete
   (nil (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil List_Ops nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (append def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length_append formula-decl nil List_Ops nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil))
   300 250 t shostak))
 (list_eq_TCC1 0
  (list_eq_TCC1-1 nil 3293748273 3293748382 ("" (grind) nil nil)
   proved-complete
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   3327 160 t shostak))
 (list_eq 0
  (list_eq-1 nil 3290678396 3352695366
   ("" (induct "l1")
    (("1" (skosimp*)
      (("1" (assert)
        (("1" (lemma "length_null")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (assert)
        (("2" (case "l2!1=null")
          (("1" (replace -1 * lr) (("1" (assert) nil nil)) nil)
           ("2" (inst -1 "cdr(l2!1)")
            (("1" (split -1)
              (("1" (decompose-equality 2)
                (("1" (inst -3 "0")
                  (("1" (expand "nth") (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "length" -1 2) (("2" (assert) nil nil))
                nil)
               ("3" (skosimp*)
                (("3" (inst -2 "i!1+1")
                  (("3" (expand "nth" -) (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (typepred "i!1") (("3" (assert) nil nil)) nil)) nil))
    nil)
   proved-complete
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_cons formula-decl nil List_Ops nil)
    (length_null formula-decl nil List_Ops nil)
    (length_empty formula-decl nil List_Ops nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil List_Ops nil)
    (nth def-decl "T" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   270 230 t shostak)))
(Ranged_Set
 (ranged_set_TCC1 0
  (ranged_set_TCC1-1 nil 3255418021 nil
   ("" (skosimp*)
    (("" (case "y!1 >= x!1")
      (("1" (expand "is_finite")
        (("1"
          (inst 1 "y!1-x!1+1"
           "LAMBDA (z:{z:int|x!1 <= z AND z <= y!1}):z-x!1")
          (("1" (grind) nil nil) ("2" (ground) nil nil)) nil))
        nil)
       ("2"
        (case "(LAMBDA (z: int): x!1 <= z AND z <= y!1) = emptyset[int]")
        (("1" (replace -1 * lr)
          (("1" (lemma "finite_emptyset[int]") (("1" (propax) nil nil))
            nil))
          nil)
         ("2" (expand "emptyset")
          (("2" (decompose-equality 1) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (is_finite const-decl "bool" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil))
   nil nil nil nil)))
(Ranges
 (member_ranged 0
  (member_ranged-1 nil 3255418037 3352695367
   ("" (skosimp*)
    (("" (expand "ranged_list")
      (("" (case "y!1 > z!1")
        (("1" (assert)
          (("1" (expand "member") (("1" (grind) nil nil)) nil)) nil)
         ("2" (assert)
          (("2" (name "a" "z!1-y!1")
            (("2" (case "y!1 = z!1 - a")
              (("1" (replace -1 * lr)
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (hide -1)
                      (("1" (generalize "a" "a" "nat" *)
                        (("1" (induct "a")
                          (("1" (expand "ranged_list1")
                            (("1" (expand "member")
                              (("1"
                                (expand "member")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "ranged_list1" +)
                              (("2"
                                (expand "member" +)
                                (("2"
                                  (split -)
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replace -1 * lr)
                                    (("2"
                                      (hide -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((ranged_list const-decl "list[int]" Ranged_List nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (ranged_list1 def-decl "list[int]" Ranged_List nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   246 190 t nil))
 (elems_ranged 0
  (elems_ranged-1 nil 3255418037 3352695367
   ("" (skosimp*)
    (("" (expand "ranged_list")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "list2set")
              (("1" (expand "ranged_set")
                (("1" (expand "emptyset")
                  (("1" (decompose-equality 1) (("1" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (name "a" "y!1-x!1")
              (("2" (case "x!1=y!1-a")
                (("1" (replace -1 * lr)
                  (("1" (hide -1 -2)
                    (("1" (generalize "a" "a" "nat" *)
                      (("1" (ground) nil nil) ("2" (ground) nil nil)
                       ("3" (induct "a")
                        (("1" (ground)
                          (("1" (expand "ranged_list1")
                            (("1" (expand "list2set")
                              (("1"
                                (expand "list2set")
                                (("1"
                                  (expand "add")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "emptyset")
                                      (("1"
                                        (expand "ranged_set")
                                        (("1"
                                          (decompose-equality 2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (split)
                            (("1" (ground) nil nil)
                             ("2" (expand "ranged_list1" +)
                              (("2"
                                (expand "list2set" +)
                                (("2"
                                  (replace -1 * lr)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "add")
                                      (("2"
                                        (expand "ranged_set")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (decompose-equality 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((ranged_list const-decl "list[int]" Ranged_List nil)
    (list2set def-decl "set[T]" list2set nil)
    (emptyset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ranged_set const-decl "finite_set[int]" Ranged_Set nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ranged_list1 def-decl "list[int]" Ranged_List nil)
    (>= const-decl "bool" reals nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (set type-eq-decl nil sets nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   302 240 t nil))
 (length_ranged 0
  (length_ranged-1 nil 3255418048 3352695367
   ("" (skosimp*)
    (("" (name "n" "y!1-x!1")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ranged_list")
              (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ranged_list")
              (("2" (ground)
                (("2" (case "x!1=y!1-n")
                  (("1" (replace -1 * lr)
                    (("1" (ground)
                      (("1" (hide -1 -2)
                        (("1" (generalize "n" "n" nat)
                          (("1" (induct-and-simplify "n") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ranged_list const-decl "list[int]" Ranged_List nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ranged_list1 def-decl "list[int]" Ranged_List nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil))
   237 210 t shostak)))
(Set_Ops
 (choose_set_TCC1 0
  (choose_set_TCC1-1 nil 3352695367 3352697854 ("" (grind) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil Set_Ops nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   55908 790 t shostak))
 (choose_set_member 0
  (choose_set_member-3 nil 3352698812 3352699034
   ("" (skosimp*)
    (("" (typepred "s!1")
      (("" (use "epsilon_ax[T]")
        (("1" (assert)
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (skosimp*)
                (("1" (expand "member") (("1" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nonempty?")
          (("2" (expand "empty?")
            (("2" (skosimp*)
              (("2" (expand "member") (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil Set_Ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (TRUE const-decl "bool" booleans nil))
   104128 2440 t nil)
  (choose_set_member-2 nil 3352697505 3352698727
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
               ("2" (flatten)
                (("2" (use "epsilon_ax[T]")
                  (("2" (assert)
                    (("2" (skosimp*) (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((nonempty? const-decl "bool" sets nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil Set_Ops nil)
    (empty? const-decl "bool" sets nil))
   8 0 nil nil)
  (choose_set_member-1 nil 3299370518 3352697221
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "choose_set")
        (("" (expand "nonempty?")
          (("" (expand "empty?")
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (use "epsilon_ax[T]")
                    (("2" (assert)
                      (("2" (skosimp*) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((empty? const-decl "bool" sets nil)
    (T formal-type-decl nil Set_Ops nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (nonempty? const-decl "bool" sets nil))
   30 20 t shostak)))
(Fun_inverse)
(Int_Ops
 (rsl_expt_TCC1 0
  (rsl_expt_TCC1-1 nil 3255418024 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil nil nil nil))
 (rsl_expt_TCC2 0
  (rsl_expt_TCC2-1 nil 3255418024 nil ("" (subtype-tcc) nil nil)
   proved-complete
   ((number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil nil nil nil)))
(set_induction
 (complete_set_induction 0
  (complete_set_induction-1 nil 3256523860 3352695367
   ("" (skosimp*)
    ((""
      (case "(FORALL (n:nat), (s: finite_set[T]): card(s) = n IMPLIES p!1(s))")
      (("1" (assert) (("1" (inst -1 "s!1") nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "n" 1 "NAT_induction")
          (("2" (skosimp*)
            (("2" (inst -3 "s!2")
              (("2" (assert)
                (("2" (skosimp*)
                  (("2" (inst -1 "card(s1!1)")
                    (("2" (split -1)
                      (("1" (inst -1 "s1!1") nil nil)
                       ("2" (hide 2 3)
                        (("2" (expand "strict_subset?")
                          (("2" (flatten)
                            (("2" (lemma "card_subset")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "same_card_subset")
                                    (("2"
                                      (inst? -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((pred type-eq-decl nil defined_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil set_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (strict_subset? const-decl "bool" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (same_card_subset formula-decl nil finite_sets nil))
   100 80 t shostak)))

